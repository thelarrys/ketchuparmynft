{"ast":null,"code":"// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nexport const fetchData = () => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let totalSupply = await store.getState().blockchain.smartContract.methods.totalSupply().call(); // let cost = await store\n      //   .getState()\n      //   .blockchain.smartContract.methods.cost()\n      //   .call();\n\n      dispatch(fetchDataSuccess({\n        totalSupply // cost,\n\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","map":{"version":3,"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","dispatch","totalSupply","getState","blockchain","smartContract","methods","call","err","console","log"],"sources":["/home/larry/Documents/HashlipsDapp/ketchuparmynft/src/redux/data/dataActions.js"],"sourcesContent":["// log\r\nimport store from \"../store\";\r\n\r\nconst fetchDataRequest = () => {\r\n  return {\r\n    type: \"CHECK_DATA_REQUEST\",\r\n  };\r\n};\r\n\r\nconst fetchDataSuccess = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst fetchDataFailed = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const fetchData = () => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchDataRequest());\r\n    try {\r\n      let totalSupply = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.totalSupply()\r\n        .call();\r\n      // let cost = await store\r\n      //   .getState()\r\n      //   .blockchain.smartContract.methods.cost()\r\n      //   .call();\r\n\r\n      dispatch(\r\n        fetchDataSuccess({\r\n          totalSupply,\r\n          // cost,\r\n        })\r\n      );\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\r\n    }\r\n  };\r\n};\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;EAC7B,OAAO;IACLC,IAAI,EAAE;EADD,CAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;EACpC,OAAO;IACLF,IAAI,EAAE,oBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,MAAMC,eAAe,GAAID,OAAD,IAAa;EACnC,OAAO;IACLF,IAAI,EAAE,mBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,OAAO,MAAME,SAAS,GAAG,MAAM;EAC7B,OAAO,MAAOC,QAAP,IAAoB;IACzBA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;;IACA,IAAI;MACF,IAAIO,WAAW,GAAG,MAAMR,KAAK,CAC1BS,QADqB,GAErBC,UAFqB,CAEVC,aAFU,CAEIC,OAFJ,CAEYJ,WAFZ,GAGrBK,IAHqB,EAAxB,CADE,CAKF;MACA;MACA;MACA;;MAEAN,QAAQ,CACNJ,gBAAgB,CAAC;QACfK,WADe,CAEf;;MAFe,CAAD,CADV,CAAR;IAMD,CAhBD,CAgBE,OAAOM,GAAP,EAAY;MACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACAP,QAAQ,CAACF,eAAe,CAAC,oCAAD,CAAhB,CAAR;IACD;EACF,CAtBD;AAuBD,CAxBM"},"metadata":{},"sourceType":"module"}