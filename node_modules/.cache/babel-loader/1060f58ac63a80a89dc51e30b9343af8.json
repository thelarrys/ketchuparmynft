{"ast":null,"code":"// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\"; // log\n\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\"\n  };\n};\n\nconst connectSuccess = payload => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst connectFailed = payload => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload\n  };\n};\n\nconst updateAccountRequest = payload => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload\n  };\n};\n\nexport const connect = () => {\n  return async dispatch => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/config/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const CONFIG = await configResponse.json();\n    const {\n      ethereum\n    } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n\n      try {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\"\n        });\n\n        if (networkId == CONFIG.NETWORK.ID) {\n          const SmartContractObj = new Web3EthContract(abi, CONFIG.CONTRACT_ADDRESS);\n          dispatch(connectSuccess({\n            account: accounts[0],\n            smartContract: SmartContractObj,\n            web3: web3\n          })); // Add listeners start\n\n          ethereum.on(\"accountsChanged\", accounts => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          }); // Add listeners end\n        } else {\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\nexport const updateAccount = account => {\n  return async dispatch => {\n    dispatch(updateAccountRequest({\n      account: account\n    }));\n    dispatch(fetchData(account));\n  };\n};","map":{"version":3,"names":["Web3EthContract","Web3","fetchData","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","abiResponse","fetch","headers","Accept","abi","json","configResponse","CONFIG","ethereum","window","metamaskIsInstalled","isMetaMask","setProvider","web3","accounts","request","method","networkId","NETWORK","ID","SmartContractObj","CONTRACT_ADDRESS","account","smartContract","on","updateAccount","location","reload","NAME","err"],"sources":["/home/larry/Documents/HashlipsDapp/ketchuparmynft/src/redux/blockchain/blockchainActions.js"],"sourcesContent":["// constants\r\nimport Web3EthContract from \"web3-eth-contract\";\r\nimport Web3 from \"web3\";\r\n// log\r\nimport { fetchData } from \"../data/dataActions\";\r\n\r\nconst connectRequest = () => {\r\n  return {\r\n    type: \"CONNECTION_REQUEST\",\r\n  };\r\n};\r\n\r\nconst connectSuccess = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst connectFailed = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst updateAccountRequest = (payload) => {\r\n  return {\r\n    type: \"UPDATE_ACCOUNT\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const connect = () => {\r\n  return async (dispatch) => {\r\n    dispatch(connectRequest());\r\n    const abiResponse = await fetch(\"/config/abi.json\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    });\r\n    const abi = await abiResponse.json();\r\n    const configResponse = await fetch(\"/config/config.json\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    });\r\n    const CONFIG = await configResponse.json();\r\n    const { ethereum } = window;\r\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\r\n    if (metamaskIsInstalled) {\r\n      Web3EthContract.setProvider(ethereum);\r\n      let web3 = new Web3(ethereum);\r\n      try {\r\n        const accounts = await ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const networkId = await ethereum.request({\r\n          method: \"net_version\",\r\n        });\r\n        if (networkId == CONFIG.NETWORK.ID) {\r\n          const SmartContractObj = new Web3EthContract(\r\n            abi,\r\n            CONFIG.CONTRACT_ADDRESS\r\n          );\r\n          dispatch(\r\n            connectSuccess({\r\n              account: accounts[0],\r\n              smartContract: SmartContractObj,\r\n              web3: web3,\r\n            })\r\n          );\r\n          // Add listeners start\r\n          ethereum.on(\"accountsChanged\", (accounts) => {\r\n            dispatch(updateAccount(accounts[0]));\r\n          });\r\n          ethereum.on(\"chainChanged\", () => {\r\n            window.location.reload();\r\n          });\r\n          // Add listeners end\r\n        } else {\r\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\r\n        }\r\n      } catch (err) {\r\n        dispatch(connectFailed(\"Something went wrong.\"));\r\n      }\r\n    } else {\r\n      dispatch(connectFailed(\"Install Metamask.\"));\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateAccount = (account) => {\r\n  return async (dispatch) => {\r\n    dispatch(updateAccountRequest({ account: account }));\r\n    dispatch(fetchData(account));\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}